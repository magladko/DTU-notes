
(* (f+g)' = f' + g' *)
(* (f*g)' = f'*g + f*g' *)

(*fun deriv :: "exp \<Rightarrow> exp" where
  "deriv (Const _) = Const 0" |
  "deriv Var = Const 1" |
  "deriv (Add e1 e2) = Add (deriv e1) (deriv e2)" | 
  "deriv (Mult e1 e2) = Add (Mult (deriv e1) e2) (Mult e1 (deriv e2))" 
*)


(*fun is_zero :: "exp \<Rightarrow> bool" where
  "is_zero (Const r) = (r = 0)" |
  "is_zero Var = False" |
  "is_zero (Add e1 e2) = (is_zero e1 \<and> is_zero e2)" |
  "is_zero (Mult e1 e2) = (is_zero e1 \<or> is_zero e2)"
*)
(*fun degree :: "exp \<Rightarrow> nat" where
  "degree (Const _) = 0" |
  "degree Var = 1" |
  "degree (Add e1 e2) = max (degree e1) (degree e2)" |
  "degree (Mult e1 e2) = (if is_zero e1 \<or> is_zero e2 then 0 else degree e1 + degree e2)"
*)
(* (expression, degree, counter) \<Rightarrow> coefficient list *)
(*fun coeffs_rec :: "exp \<Rightarrow> nat \<Rightarrow> nat \<Rightarrow> int list" where
  "coeffs_rec e 0 f = [(eval e 0) div fact f]" |
  "coeffs_rec e d f = ((eval e 0) div (fact f)) # (coeffs_rec (deriv e) (d-1) (Suc f))"
*)

(*fun coeffs_rec :: "exp \<Rightarrow> nat \<Rightarrow> int list" where
"coeffs_rec (Const _) _ = [0]" |
"coeffs_rec e f = ((eval e 0) div (fact f)) # (coeffs_rec (deriv e) (Suc f))"
*)


  (*"coeffs e = coeffs_rec e (degree e) 0"*)
  (*"coeffs e = coeffs_rec e 0"*)


(* test *)
value "coeffs (Add (Const 1)
       (Add (Mult (Const 2) Var) 
            (Add (Mult (Const 3) (Mult Var Var)) 
                 ((Mult (Const 4) (Mult (Mult Var Var) Var))))))"
value "coeffs (Mult (Add (Mult Var (Const 2)) (Const 1)) (Const 2))"